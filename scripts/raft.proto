syntax = "proto3";

package raft;

option go_package = "./raft";

// Raft服务定义
service RaftService {
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply) {}
  rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply) {}
  
  // --- 新增RPC方法 ---
  rpc SubmitTransaction(Transaction) returns (TransactionReply) {}
  
  // --- 新增RPC方法，用于查询区块 ---
  rpc GetBlocks(GetBlocksArgs) returns (GetBlocksReply) {}
}

// --- 新增消息体 ---
// 外部提交的交易结构
message Transaction {
    string type = 1;
    string sender_public_key = 2;
    bytes  payload = 3; // 使用bytes来灵活承载不同类型的json payload
}

// 提交交易后的响应
message TransactionReply {
    bool   success = 1;
    string tx_hash = 2; // 交易哈希
    string leader_hint = 3; // 如果当前节点不是leader，可以提示leader地址
}


// Block, AppendEntriesArgs, AppendEntriesReply, RequestVoteArgs, RequestVoteReply 保持不变...
message Block {
    int64  term = 1;
    bytes  data = 2;
    string hash = 3;
    string prev_hash = 4;
}
message AppendEntriesArgs {
    int32   term = 1;
    int32   leader_id = 2;
    int32   prev_log_index = 3;
    int32   prev_log_term = 4;
    repeated Block entries = 5;
    int32   leader_commit = 6;
}
message AppendEntriesReply {
    int32  term = 1;
    bool   success = 2;
}
message RequestVoteArgs {
    int32  term = 1;
    int32  candidate_id = 2;
    int32  last_log_index = 3;
    int32  last_log_term = 4;
}
message RequestVoteReply {
    int32  term = 1;
    bool   vote_granted = 2;
}

// --- 新增消息体 ---
message GetBlocksArgs {
  int32 page = 1;
  int32 limit = 2;
}

message Pagination {
  int32 current_page = 1;
  int32 total_pages = 2;
  int64 total_items = 3;
  int32 per_page = 4;
}

message GetBlocksReply {
  repeated Block blocks = 1;
  Pagination pagination = 2;
}